/////////////////////////////////////////////////////////////////////////////////
//
// NEngine C++ Library
// Copyright (c) 2017-2017 Sebastian Netsch
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//    claim that you wrote the original software. If you use this software
//    in a product, an acknowledgment in the product documentation would be
//    appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such, and must not be
//    misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////
#ifndef __NENGINE__NPARTICLE_SYSTEM__PARTICLE__
#define __NENGINE__NPARTICLE_SYSTEM__PARTICLE__

#include <SFML/Graphics.hpp>

/////////////////////////////////////////////////////////////////////////////////
// ! namespace for the nengine
/////////////////////////////////////////////////////////////////////////////////
namespace nengine {

/////////////////////////////////////////////////////////////////////////////////
// ! namespace for the nparticle_system
/////////////////////////////////////////////////////////////////////////////////
namespace nparticle_system {

/////////////////////////////////////////////////////////////////////////////////
// ! a single particle
/////////////////////////////////////////////////////////////////////////////////
struct nparticle : public sf::Drawable
{
	/////////////////////////////////////////////////////////////////////////////////
	// ! SFML Vertex for positioning the nparticle
	/////////////////////////////////////////////////////////////////////////////////
	sf::Vertex pos;
	/////////////////////////////////////////////////////////////////////////////////
	// ! SFML Vector for the velocity of the nparticle
	/////////////////////////////////////////////////////////////////////////////////
	sf::Vector2f vel;
	/////////////////////////////////////////////////////////////////////////////////
	// ! SFML Color for the color of the nparticle
	/////////////////////////////////////////////////////////////////////////////////
	sf::Color color;
	/////////////////////////////////////////////////////////////////////////////////
	// ! SFML RectangleShape for more reliable crash safety instead of drawing
	//   single pixels
	/////////////////////////////////////////////////////////////////////////////////
	sf::RectangleShape rect;
	/////////////////////////////////////////////////////////////////////////////////
	// ! to set the nparticle as decaying --> if false get's deleted once it
	//   reaches an edge
	/////////////////////////////////////////////////////////////////////////////////
	bool fading;
	/////////////////////////////////////////////////////////////////////////////////
	// ! health points for decaying a nparticle
	/////////////////////////////////////////////////////////////////////////////////
	float health_points;
	/////////////////////////////////////////////////////////////////////////////////
	// ! decay rate for decaying a nparticle
	/////////////////////////////////////////////////////////////////////////////////
	float decay_rate;
	/////////////////////////////////////////////////////////////////////////////////
	// ! virtual draw function
	/////////////////////////////////////////////////////////////////////////////////
	virtual void draw(sf::RenderTarget &target, sf::RenderStates states) const {target.draw(&pos, 1, sf::Points, states);};
}; // end of struct nparticle

} // end of namespace nparticle_system

} // end of namespace nengine

#endif // end of __NENGINE__NPARTICLE_SYSTEM__PARTICLE__
